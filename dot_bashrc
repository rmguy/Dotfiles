# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
export GOPATH=/usr/local/google/home/beeps/goproj
HOME=/usr/local/google/home/beeps
PATH="$PATH":/usr/local/google/home/beeps/depot_tools
PATH=$PATH:$HOME/go-tools/bin
KPATH=$GOPATH/src/github.com/GoogleCloudPlatform/kubernetes
SANDBOX=$HOME/goproj/src/github.com/truthninja/sandbox
function runsweet {
    if [ -z "$1" ]; then
        echo 'specify board';
    else
        l=$(/usr/local/autotest/cli/atest host list -b pool:bot,board:$1);
        i=$(echo $l | grep -oh cros-version:.* | awk -F, '{print $1}' | sed 's/cros-version://');
        echo "/usr/local/autotest/site_utils/run_suite.py -b $1 -i $i -s dummy -p bot";
    fi
}

function goto {
    grep -ir "$1" $(find -iname "*.go")
}

function enterdock {
    set -x
    sudo nsenter --target $1 --mount --uts --ipc --net --pid
    set +x
}

function killie {
    t=$(ps aux | grep $1 | grep -v grep | awk '{print $2}' | tr '\n' ' ')
    echo $t
    read -r -p "Kill them? [y/N] " response
    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
    then
        echo "oh joy."
        sudo kill $t
    else
        echo "meh"
    fi
}

function startetcd {
    GOMAXPROCS=60 etcd &
    sleep 1
    echo "====================started etcd"
    echo $(ps aux | grep etcd)
    curl -L -X PUT http://127.0.0.1:4001/v2/keys/message -d value="Hello"
    etcdctl ls --recursive
}

function testint {
    cd /usr/local/google/home/beeps/goproj/src/github.com/GoogleCloudPlatform/kubernetes/test/integration
    go test -tags integration -test.v -test.run $1
}

function testbench {
    cd /usr/local/google/home/beeps/goproj/src/github.com/GoogleCloudPlatform/kubernetes/test/integration
    go test -tags benchmark -bench $1
}

function rerun {
    d=/tmp/$1
    echo rm $d; nohup ./hack/ginkgo-e2e.sh --ginkgo.focus=$1.* > $d 2>&1 &
    echo tail -f $d
}

function getlogs {
   m=$1.us-central1-b.kubernetesdev
   echo pulling logs via: rsync beeps@$m:$2 ~/logs/$3
   rsync beeps@$m:$2 ~/logs/$3
}

function pushup {
    echo NUM_MINIONS=$NUM_MINIONS
    echo MASTER_SIZSE=$MASTER_SIZE
    read -r -p "Pushup? [y/N] " response
    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
    then
        echo "Time to push."
        d=/tmp/pushup
        set -x
        rm $d
        nohup go run ./hack/e2e.go -pushup -v > $d 2>&1 &
        set +x
    else
        echo "meh"
    fi
}

function masterlogs {
    export D=$(date +"%H-%M");
    getlogs e2e-test-beeps-master /var/log/kube-apiserver.log kube_apiserver_$1_$D.log;
    getlogs e2e-test-beeps-master /var/log/kube-scheduler.log kube_scheduler_$1_$D.log;
    getlogs e2e-test-beeps-master /var/log/kube-controller-manager.log kube_controller_$1_$D.log;
}

# The next line updates PATH for the Google Cloud SDK.
source '/usr/local/google/home/beeps/google-cloud-sdk/path.bash.inc'

# The next line enables bash completion for gcloud.
source '/usr/local/google/home/beeps/google-cloud-sdk/completion.bash.inc'

# 256 colors needed for sensible vim colorschems
[[ -n "$DISPLAY" && "$TERM" = "xterm" ]] && export TERM=xterm-256color
# Tmux sets screen and I don't want to muck around with bash if right now
[[ -n "$DISPLAY" && "$TERM" = "screen" ]] && export TERM=xterm-256color

source ~/.git-prompt.sh


PS1="\[$GREEN\]\t\[$RED\]-\[$BLUE\]\u\[$YELLOW\]\[$YELLOW\]\w\[\033[m\]\[\$MAGENTA]\$(__git_ps1)$ "
# [ -z "$TMUX" ] && exec tmux
